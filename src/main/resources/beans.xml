<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">
       <!-- 1.加载用于数据库配置的属性文件 -->
       <context:property-placeholder location="classpath:db.properties"/>
       <!-- 2.包扫描：dao,service -->
       <context:component-scan base-package="com.bluefireplatform.*"></context:component-scan>
       <!-- 3.dataSource数据源 -->
       <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
       		<property name="driverClass" value="${jdbc.driver}"></property>
       		<property name="jdbcUrl" value="${jdbc.url}"></property>
       		<property name="user" value="${jdbc.username}"></property>
       		<property name="password" value="${jdbc.password}"></property>
       		<!-- 连接池中最大连接数，默认为15 -->
       		<property name="maxPoolSize" value="${c3p0.pool.maxPoolSize}"></property>
       		<!-- 连接池中最小连接数，默认为15 -->
       		<property name="minPoolSize" value="${c3p0.pool.minPoolSize}"></property>
       		<!-- 初始化时创建的连接数，应在取值 -->
       		<property name="initialPoolSize" value="${c3p0.pool.initialPoolSize}"></property>
       		<!-- 定义从数据库获取新连接失败后重复尝试获取的次数，默认为10 -->
       		<property name="acquireIncrement" value="${c3p0.pool.acquireIncrement}"></property>
        </bean>
        <!-- 4.SessionFactory -->
        <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        	<property name="dataSource" ref="dataSource"></property>
        	<property name="configLocation" value="classpath:SqlMapConfig.xml"></property>
        	<property name="mapperLocations" value="classpath:com/bluefireplatform/mapper/*.xml"></property>
        </bean>
        <bean class = "org.mybatis.spring.mapper.MapperScannerConfigurer">
        	<property name="basePackage" value="com.bluefireplatform.mapper"></property>
        	<property name="sqlSessionFactoryBeanName" value="sessionFactory"></property>
        </bean>
        <!-- 5.事务管理 -->
        <!-- 数据的事物管理 开始 -->
	    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	        <property name="dataSource" ref="dataSource"/>
	    </bean>
	    <tx:annotation-driven transaction-manager="transactionManager" order="2"/>
	    
	    <bean id="MyAopOfUser" class="com.bluefireplatform.aop.MyAopOfUser"/>
		<aop:config>
			<aop:pointcut expression="@annotation(com.bluefireplatform.aop.UserLog)" id="myPointcutOfUser"/>
			<aop:advisor advice-ref="MyAopOfUser" pointcut-ref="myPointcutOfUser" order="1"/>
		</aop:config>
	<!-- 注解方式配置事物，不需要以下    
		配置事务特性
	    <tx:advice id="txAdvice" transaction-manager="transactionManager" >
	        <tx:attributes>
	        <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
	        <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
	        <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
	        <tx:method name="cancle*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
	        <tx:method name="select*" read-only="true" rollback-for="java.lang.Exception"/>
	        <tx:method name="count*" read-only="true" rollback-for="java.lang.Exception"/>
	        <tx:method name="query*" read-only="true" rollback-for="java.lang.Exception"/>
	       
	       </tx:attributes>
	    </tx:advice>
	    配置哪些类的方法需要进行事务管理
	    <aop:config>
	        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.example.service..*.*(..))"/>
	    </aop:config>
	    数据的事物管理 结束 -->
</beans>